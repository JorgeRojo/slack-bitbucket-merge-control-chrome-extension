name: Close Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to close (e.g., v1.0.0)'
        required: true
  # Auto-trigger after PR merge from develop to master
  pull_request:
    types: [closed]
    branches: [master]

# Define permissions needed for the workflow
permissions:
  contents: write # Needed for pushing commits and tags

jobs:
  validate-and-close-version:
    runs-on: ubuntu-latest
    # Only run if manually triggered OR if PR was merged from develop/release branch
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event.pull_request.merged == true && 
       (startsWith(github.event.pull_request.head.ref, 'develop') || 
        startsWith(github.event.pull_request.head.ref, 'release/')))

    steps:
      - name: Checkout master branch
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0

      - name: Validate Git Flow compliance
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [ "$CURRENT_BRANCH" != "master" ]; then
            echo "::error::Version closing can only be performed on the master branch"
            exit 1
          fi

          # If triggered by PR merge, validate it came from develop or release branch
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
            if [[ ! "$SOURCE_BRANCH" =~ ^(develop|release/) ]]; then
              echo "::error::Master branch can only receive code from develop or release/* branches. Got: $SOURCE_BRANCH"
              exit 1
            fi
            echo "✅ Valid merge from $SOURCE_BRANCH to master"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Extract and validate version format
        id: extract-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            INPUT_VERSION="${{ github.event.inputs.version }}"
          else
            # Extract version from PR title if auto-triggered
            PR_TITLE="${{ github.event.pull_request.title }}"
            echo "PR Title: $PR_TITLE"
            
            # Try to extract version from PR title
            INPUT_VERSION=$(echo "$PR_TITLE" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1 || echo "")
            
            if [ -z "$INPUT_VERSION" ]; then
              echo "::warning::Could not extract version from PR title: $PR_TITLE"
              echo "::warning::This appears to be a non-release PR merge. Skipping version closing."
              echo "SKIP_VERSION=true" >> $GITHUB_ENV
              exit 0
            fi
          fi

          # Check if version starts with 'v' and extract the version number
          if [[ $INPUT_VERSION =~ ^v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "INPUT_VERSION=$INPUT_VERSION" >> $GITHUB_ENV
            echo "Extracted version: $VERSION"
          else
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "::error::Invalid version format: $INPUT_VERSION. Must follow format v1.0.0 (vMAJOR.MINOR.PATCH)"
              exit 1
            else
              echo "::warning::Invalid version format in PR title: $INPUT_VERSION"
              echo "::warning::Skipping version closing for non-release PR"
              echo "SKIP_VERSION=true" >> $GITHUB_ENV
              exit 0
            fi
          fi

      - name: Validate version is higher
        if: env.SKIP_VERSION != 'true'
        id: validate-higher
        run: |
          NEW_VERSION="${{ env.VERSION }}"

          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"

          # Compare versions using node semver
          IS_HIGHER=$(node -e "
            const semver = require('semver');
            const isHigher = semver.gt('$NEW_VERSION', '$CURRENT_VERSION');
            console.log(isHigher ? 'true' : 'false');
          ")

          if [ "$IS_HIGHER" != "true" ]; then
            echo "::error::New version ($NEW_VERSION) must be higher than current version ($CURRENT_VERSION)"
            exit 1
          fi

          echo "✅ New version is higher than current version"

      - name: Run linter
        if: env.SKIP_VERSION != 'true'
        run: npm run lint

      - name: Run type check
        if: env.SKIP_VERSION != 'true'
        run: npm run type-check

      - name: Run tests
        if: env.SKIP_VERSION != 'true'
        run: npm run test

      - name: Build extension
        if: env.SKIP_VERSION != 'true'
        run: npm run build

      - name: Update version in package.json
        if: env.SKIP_VERSION != 'true'
        run: |
          npm version ${{ env.VERSION }} --no-git-tag-version

      - name: Update version in manifest.json
        if: env.SKIP_VERSION != 'true'
        run: |
          # Read the current manifest.json
          MANIFEST_PATH="src/manifest.json"

          # Update the version using jq
          jq '.version = "${{ env.VERSION }}"' $MANIFEST_PATH > temp.json
          mv temp.json $MANIFEST_PATH

          echo "Updated manifest.json version to ${{ env.VERSION }}"

      - name: Lint and fix modified files
        if: env.SKIP_VERSION != 'true'
        run: |
          echo "Running lint --fix on modified files..."
          # Run lint --fix on the specific files that were modified
          npm run lint -- --fix package.json src/manifest.json
          echo "Linting completed"

      - name: Configure Git
        if: env.SKIP_VERSION != 'true'
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      - name: Commit version changes
        if: env.SKIP_VERSION != 'true'
        run: |
          git add package.json package-lock.json src/manifest.json
          git commit -m "chore: close version ${{ env.INPUT_VERSION }}"

      - name: Create version tag
        if: env.SKIP_VERSION != 'true'
        run: |
          git tag -a ${{ env.INPUT_VERSION }} -m "Version ${{ env.VERSION }}"

      - name: Push changes and tag to master
        if: env.SKIP_VERSION != 'true'
        run: |
          # Set the remote URL with the token for authentication
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}

          # Push both the commit and the tag to master
          git push origin master
          git push origin ${{ env.INPUT_VERSION }}

      - name: Create summary
        run: |
          if [ "${{ env.SKIP_VERSION }}" = "true" ]; then
            echo "## ℹ️ Version Closing Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This PR merge did not contain a version in the title." >> $GITHUB_STEP_SUMMARY
            echo "Version closing is only performed for release PRs." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**PR Title**: ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
            echo "**Expected Format**: Should contain version like 'Release v1.0.0'" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🎉 Version ${{ env.INPUT_VERSION }} Closed Successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: ${{ env.INPUT_VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: master" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: $(git rev-parse HEAD)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Ready for release workflow!" >> $GITHUB_STEP_SUMMARY
          fi
