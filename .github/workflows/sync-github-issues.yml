name: Sync GitHub Issues to Documentation

on:
  # Run when issues are opened, closed, reopened, or labeled/unlabeled
  issues:
    types: [opened, closed, reopened, labeled, unlabeled]

  # Run on a schedule to catch any missed updates
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC

  # Allow manual triggering
  workflow_dispatch:

# Cancel any running workflow when a new one is triggered
concurrency:
  group: sync-github-issues
  cancel-in-progress: true

# Define permissions needed for the GITHUB_TOKEN
permissions:
  contents: write # For repository operations
  issues: read # For reading issues

jobs:
  sync-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v3
        with:
          ref: develop
          # Use a personal access token to allow the workflow to commit changes
          token: ${{ secrets.PAT_TOKEN || github.token }}

      - uses: ./.github/actions/setup-node-and-deps

      - name: Sync GitHub issues to documentation
        id: sync
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            // Define the full path to the script
            const scriptPath = path.join(process.env.GITHUB_WORKSPACE, '.github', 'scripts', 'sync-github-issues.js');
            console.log(`Loading script from: ${scriptPath}`);

            // Import the external script using dynamic import with absolute path
            const syncModule = await import(`file://${scriptPath}`);
            const syncGitHubIssues = syncModule.default;

            // Execute the script with all required parameters
            const result = await syncGitHubIssues({ 
              github, 
              context, 
              core, 
              exec, 
              fs, 
              path
            });

            // Set outputs for use in later steps
            core.setOutput('created_files', result.createdFiles.length);
            core.setOutput('removed_files', result.removedFiles.length);

            return result;

      - name: Lint and fix modified files
        run: |
          # Check if there are any changes in the documentation directory
          if [[ -n "$(git status --porcelain documentation/)" ]]; then
            echo "Documentation files were modified"
            
            # Check if there are any JS/TS files in documentation directory that need linting
            JS_TS_FILES=$(find documentation/ -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" 2>/dev/null || true)
            
            if [[ -n "$JS_TS_FILES" ]]; then
              echo "Running lint --fix on JavaScript/TypeScript files in documentation..."
              echo "$JS_TS_FILES" | xargs npm run lint -- --fix
              echo "Linting completed"
            else
              echo "No JavaScript/TypeScript files found in documentation directory"
              echo "Skipping ESLint (documentation contains only Markdown files)"
            fi
          else
            echo "No documentation files modified, skipping lint step"
          fi

      - uses: ./.github/actions/configure-git

      - name: Commit and push changes to develop
        run: |
          # Check if there are any changes to commit
          if [[ -n "$(git status --porcelain)" ]]; then
                        
            # Add all changes, including deletions
            git add -A documentation/
            
            # Commit and push changes to develop branch
            git commit -m "[AUTOMATED] Sync GitHub issues to documentation

          Following Git Flow: Documentation changes go to develop branch first"
            git push origin develop
            
            echo "âœ… Changes pushed to develop branch following Git Flow"
          else
            echo "No changes to commit"
          fi

      - name: Create summary
        run: |
          echo "## Issue Sync Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Files created: ${{ steps.sync.outputs.created_files }}" >> $GITHUB_STEP_SUMMARY
          echo "Files removed: ${{ steps.sync.outputs.removed_files }}" >> $GITHUB_STEP_SUMMARY
