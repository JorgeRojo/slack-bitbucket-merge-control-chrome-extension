name: Sync GitHub Issues to Bug Files

on:
  issues:
    types: [opened, labeled]

jobs:
  sync-to-bug-files:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'bug')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Create bug file from issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const issue = context.payload.issue;
            
            // Only process issues with the 'bug' label
            if (!issue.labels.some(label => label.name === 'bug')) {
              console.log('Not a bug issue, skipping');
              return;
            }
            
            // Check if this is a new bug issue (not already linked to a bug file)
            if (issue.body && issue.body.includes('This issue was automatically created from')) {
              console.log('Issue was created from a bug file, skipping to avoid circular reference');
              return;
            }
            
            // Find the next available bug ID
            const bugsDir = 'documentation/bugs';
            if (!fs.existsSync(bugsDir)) {
              fs.mkdirSync(bugsDir, { recursive: true });
            }
            
            const bugFiles = fs.readdirSync(bugsDir).filter(f => f.match(/^\d{3}-.+\.md$/));
            let maxId = 0;
            
            bugFiles.forEach(file => {
              const idMatch = file.match(/^(\d{3})/);
              if (idMatch) {
                const id = parseInt(idMatch[1], 10);
                if (id > maxId) maxId = id;
              }
            });
            
            const nextId = String(maxId + 1).padStart(3, '0');
            
            // Extract component from issue body
            let component = 'Unknown';
            let severity = 'Medium';
            let reproduce = '';
            let currentBehavior = '';
            let expectedBehavior = '';
            
            if (issue.body) {
              // Try to parse structured issue template fields
              const componentMatch = issue.body.match(/### Component\s+(.*?)(?=###|$)/s);
              if (componentMatch) component = componentMatch[1].trim();
              
              const severityMatch = issue.body.match(/### Severity\s+(.*?)(?=###|$)/s);
              if (severityMatch) severity = severityMatch[1].trim();
              
              const reproduceMatch = issue.body.match(/### Steps to Reproduce\s+(.*?)(?=###|$)/s);
              if (reproduceMatch) reproduce = reproduceMatch[1].trim();
              
              const currentMatch = issue.body.match(/### Current Behavior\s+(.*?)(?=###|$)/s);
              if (currentMatch) currentBehavior = currentMatch[1].trim();
              
              const expectedMatch = issue.body.match(/### Expected Behavior\s+(.*?)(?=###|$)/s);
              if (expectedMatch) expectedBehavior = expectedMatch[1].trim();
            }
            
            // Create a slug from the title
            const slug = issue.title
              .toLowerCase()
              .replace(/^\[bug\]:\s*/, '')
              .replace(/[^\w\s-]/g, '')
              .replace(/\s+/g, '-')
              .replace(/-+/g, '-')
              .substring(0, 50);
            
            // Format the bug file content
            const bugContent = `# Bug ${nextId}: ${issue.title.replace(/^\[Bug\]:\s*/i, '')}

[GitHub Issue #${issue.number}](${issue.html_url})

## Component
\`${component}\`

## Date Reported
${new Date().toISOString().split('T')[0]}

## Status
Open

## Severity
${severity}

## Reproduce
${reproduce.split('\n').map(line => `- ${line}`).join('\n')}

## Current wrong behavior
${currentBehavior}

## Expected right behavior
${expectedBehavior}

## Root Cause
Not yet determined

## Fix Summary
Not yet fixed

## Tests Added/Modified
None yet

## Related Files
- \`${component}\`
`;
            
            // Write the bug file
            const bugFilePath = path.join(bugsDir, `${nextId}-${slug}.md`);
            fs.writeFileSync(bugFilePath, bugContent);
            
            // Update the bug index file
            const indexPath = path.join(bugsDir, 'README.md');
            if (fs.existsSync(indexPath)) {
              let indexContent = fs.readFileSync(indexPath, 'utf8');
              
              // Find the table in the index file
              const tableMatch = indexContent.match(/\| ID \| Title \| Component \| Status \| Severity \| Date Reported \| Date Fixed \|\n\|[-\|]+\n([\s\S]*?)(?=\n\n## |$)/);
              
              if (tableMatch) {
                const tableStart = indexContent.indexOf(tableMatch[0]);
                const tableEnd = tableStart + tableMatch[0].length;
                
                // Add the new entry to the table
                const today = new Date().toISOString().split('T')[0];
                const newEntry = `| [${nextId}](./${nextId}-${slug}.md) | ${issue.title.replace(/^\[Bug\]:\s*/i, '')} | ${component} | Open | ${severity} | ${today} | |\n`;
                
                // Insert the new entry after the header rows
                const headerEnd = indexContent.indexOf('\n', indexContent.indexOf('|----|-------|', tableStart)) + 1;
                indexContent = indexContent.substring(0, headerEnd) + newEntry + indexContent.substring(headerEnd);
                
                fs.writeFileSync(indexPath, indexContent);
              }
            }
            
            // Commit the changes
            await exec.exec('git', ['config', 'user.name', 'GitHub Action']);
            await exec.exec('git', ['config', 'user.email', 'action@github.com']);
            await exec.exec('git', ['add', bugFilePath]);
            if (fs.existsSync(indexPath)) {
              await exec.exec('git', ['add', indexPath]);
            }
            await exec.exec('git', ['commit', '-m', `Create bug file #${nextId} from GitHub issue #${issue.number}`]);
            await exec.exec('git', ['push']);
            
            // Add a comment to the issue linking to the bug file
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `I've created a bug file for this issue: [Bug #${nextId}](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/master/${bugFilePath})`
            });
